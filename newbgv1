import pygame
from pygame.locals import *
import os
import sys
import math

#starts pygame
pygame.init()
pygame.mixer.init()
#sets size of window
screen = pygame.display.set_mode((500, 500))
#Sets title name
pygame.display.set_caption("Amruth's Final Game")
#sets all variables needed
clock = pygame.time.Clock()
#Commented out old code (Check from lines 50 to 60)
#isJump = False
#JumpCount = 10
#left = False
#right = False
#walkCount = 0
#Walkinglist, Pygame.image.load will load the given file
#all the needed sprites to show the character walking right(list)
walkRight = [pygame.image.load('R1.png'), pygame.image.load('R2.png'), pygame.image.load('R3.png'), pygame.image.load('R4.png'), pygame.image.load('R5.png'), pygame.image.load('R6.png'), pygame.image.load('R7.png'), pygame.image.load('R8.png'), pygame.image.load('R9.png')]
#all the needed sprites to walk left(list)
walkLeft = [pygame.image.load('L1.png'), pygame.image.load('L2.png'), pygame.image.load('L3.png'), pygame.image.load('L4.png'), pygame.image.load('L5.png'), pygame.image.load('L6.png'), pygame.image.load('L7.png'), pygame.image.load('L8.png'), pygame.image.load('L9.png')]
#sets the background(variable)
bg = pygame.image.load(os.path.join('newbackground.png')).convert()
#bg = pygame.image.load('galaxygamee.jpg')
bgX = 0
bgX2 = bg.get_width()
#sets what the character looks like while not walking or jumping
char = pygame.image.load('standing.png')
#Define various variables
#The Sprite is a 64x64 object
#Commented out old code (now at line 29,30)
#WIDTH = 64
#HEIGHT = 64
FPS = 30
# Define Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
#commented out old code (Now at line 27,28)
#X = 20
#Y = 440
#SCREENWIDTH = 500(now useless)
#Defines Velocity of an Object
#commented out old code(Now at line 33)
#VEL = 5
#Starts the main code, and defines essential variables
#doing this makes a global class, so I can quickly replicate 'player' if I need to, also cleans up code. Also, now if I want to draw this, all I have to do is call it and paste it in the screen window.
#Just like a game, this class is the class player. So all things named player are the same thing.
class player:
    #def__init__(all the stuff) will assign values to the things in the parenthesis, makes everything easier to call
    def __init__(self, X, Y, WIDTH, HEIGHT):
        self.X = X
        self.Y = Y
        self.WIDTH = WIDTH
        self.HEIGHT = HEIGHT
        self.VEL = 5
        self.isJump = False
        self.left = False
        self.right = False
        self.walkCount = 0
        self.JumpCount = 10
        self.standing = True
        #defines hitbox (
        self.hitbox = (self.X + 17, self.Y + 11, 29, 52)

    def draw(self,win):
        if self.walkCount + 1 >= 27:
            self.walkCount = 0

        if not(self.standing):

            if self.left:
                screen.blit(walkLeft[self.walkCount // 3], (self.X, self.Y))
                self.walkCount += 1

            elif self.right:
                screen.blit(walkRight[self.walkCount // 3], (self.X, self.Y))
                self.walkCount += 1
        else:
            if self.right:
                screen.blit(walkRight[0], (self.X, self.Y))
            else:
                screen.blit(walkLeft[0], (self.X, self.Y))
                self.hitbox = (self.X + 17, self.Y + 11, 29, 52)
                pygame.draw.rect(screen, (255,0,0), self.hitbox, 2)
        #end of the class of player, in other words, all this is just for the class player

class projectile(object):
    def __init__(self, X, Y, Radius, Color, Facing):
        self.X = X
        self.Y = Y
        self.Radius = Radius
        self.Color = Color
        self.Facing = Facing
        self.Vel = 8 * Facing

    def draw(self, screen):
        pygame.draw.circle(screen, self.Color, (self.X, self.Y), self.Radius)


class enemy(object):
    walkRight = [pygame.image.load('R1E.png'), pygame.image.load('R2E.png'), pygame.image.load('R3E.png'),
                 pygame.image.load('R4E.png'), pygame.image.load('R5E.png'), pygame.image.load('R6E.png'),
                 pygame.image.load('R7E.png'), pygame.image.load('R8E.png'), pygame.image.load('R9E.png'),
                 pygame.image.load('R10E.png'), pygame.image.load('R11E.png')]
    walkLeft = [pygame.image.load('L1E.png'), pygame.image.load('L2E.png'), pygame.image.load('L3E.png'),
                pygame.image.load('L4E.png'), pygame.image.load('L5E.png'), pygame.image.load('L6E.png'),
                pygame.image.load('L7E.png'), pygame.image.load('L8E.png'), pygame.image.load('L9E.png'),
                pygame.image.load('L10E.png'), pygame.image.load('L11E.png')]

    def __init__(self, X, Y, Width, Height, End):
        self.X = X
        self.Y = Y
        self.Width = Width
        self.Height = Height
        # This will define where our enemy starts and finishes their path.
        self.End = End
        self.Path = [self.X, self.End]
        self.walkCount = 0
        self.Vel = 3
        self.hitbox = (self.X + 17, self.Y + 2, 31, 57)

    def draw(self, screen):
        self.move()
        if self.walkCount + 1 >= 33:  # Since we have 11 images for each animtion our upper bound is 33.
            # We will show each image for 3 frames. 3 x 11 = 33.
            self.walkCount = 0

        if self.Vel > 0:  # If we are moving to the right we will display our walkRight images
            screen.blit(self.walkRight[self.walkCount // 3], (self.X, self.Y))
            self.walkCount += 1
        else:  # Otherwise we will display the walkLeft images
            screen.blit(self.walkLeft[self.walkCount // 3], (self.X, self.Y))
            self.walkCount += 1
            self.hitbox = (self.X + 17, self.Y + 2, 31, 57)
            pygame.draw.rect(screen, (255,0,0), self.hitbox, 2)

    def hit(self):
        print ('Oof, you hurt me!')
        pass



    def move(self):
        if self.Vel > 0:
            if self.X + self.Vel < self.Path[1]:
                self.X += self.Vel
            else:
                self.Vel = self.Vel * -1
                self.walkCount = 0
        else:
            if self.X - self.Vel > self.Path[0]:
                self.X += self.Vel
            else:
                self.Vel = self.Vel * -1
                self.walkCount = 0



#Start Pygame and open a game window



#new variable, to draw all the things
def remakeWindow():
    # win.blit used to draw images (in this case, on the background)
    screen.blit(bg, (bgX,0))
    screen.blit(bg, (bgX2,0))
    # make a rectangle
    #pygame.draw.rect(screen, (255, 0, 0), (X, Y, WIDTH, HEIGHT))
    #this is the variable that draws the man on the screen
    man.draw(screen)
    for shot in shots:
        shot.draw(screen)
    goblin.draw(screen)
    #Update the image
    pygame.display.update()


#Game loop
#defines man as a player with attributes (x pos, y pos, size of character)
man = player(5, 430, 64, 64)
#defines goblin as enemy with attributes(x pos, y pos, size of character, and end point of walk)
goblin = enemy(100,430,64,64, 400)
#defines
shotLoop = 0
#defines the shots
shots = []
#Starts game by stating that it is running
running = True
#Basically is 'while running is true' stated above
while running:
    #delays the window open
    pygame.time.delay(27)
    bgX -= 1.4
    bgX2 -= 1.4
    if bgX < bg.get_width() * -1:
        bgX = bg.get_width()
    if bgX2 < bg.get_width() * -1:
        bgX2 = bg.get_width()
    #
    if shotLoop > 0:
        shotLoop += 1
    if shotLoop > 3:
        shotLoop = 0
    #keep loop running at the right speed
    clock.tick(27)
    # Process input (events)
    for event in pygame.event.get():
        #check for closing window
        if event.type == pygame.QUIT:
            #then cancels the running variable
            running = False

    for shot in shots:
        #checks the collision with the hitbox
        if shot.Y - shot.Radius < goblin.hitbox[1] + goblin.hitbox[3] and shot.Y + shot.Radius > goblin.hitbox[1]:
            if shot.X + shot.Radius > goblin.hitbox[0] and shot.X - shot.Radius < goblin.hitbox[0] + goblin.hitbox[2]:
                goblin.hit()
                shots.pop(shots.index(shot))

        if shot.X < 500 and shot.X > 0:
            shot.X += shot.Vel
        else:
            shots.pop(shots.index(shot))

    # Defines the keypress varible
    keypress = pygame.key.get_pressed()
    #This is what reconizes keypresses

    if keypress[pygame.K_SPACE] and shotLoop == 0:
        #this part says that if the man  facing left, then the shot goes -1, or left
        if man.left:
            Facing = -1
        # this part says that if the man  facing right, then the shot goes 1, or right
        elif man.right:
            Facing = 1
        if len(shots) < 10:
            shots.append(projectile(round(man.X + man.WIDTH // 2), round(man.Y + man.HEIGHT // 2), 5, (255, 0, 0,), Facing ))

            shotLoop = 1
    #Keypress 'A'
    if keypress[pygame.K_a] and man.X > man.VEL:
        man.X -= man.VEL
        man.left = True
        man.right = False
        man.standing = False
    # Keypress 'D'
    elif keypress[pygame.K_d] and  man.X < 500 - man.VEL - man.WIDTH:
        man.X += man.VEL
        man.left = False
        man.right = True
        man.standing = False
    #if not moving right or left, the character is jumping
    else:
        man.standing = True
        man.walkCount = 0
    #if none of those is true, then the keypress 'SPACE' sets all these variables
    if not(man.isJump):
        #Flip if u want to have it stuck
        #if keypress[pygame.K_s] and Y < SCREENWIDTH - VEL - HEIGHT:
            #Y += VEL
        #Flip if u want to have it stuck to bottom
        #if keypress[pygame.K_w] and Y > VEL:
            #Y -= VEL
        #Jump Function
        if keypress[pygame.K_w]:
            man.isJump = True
            man.right = False
            man.left = False
            man.walkCount = 0

    else:
        if man.JumpCount >= -10:
            neg = 1
            if man.JumpCount < 0:
                neg = -1
            man.Y -= (man.JumpCount ** 2) * 0.5 * neg
            man.JumpCount -= 1

        else:
            man.isJump = False
            man.JumpCount = 10
            #calls function @ the top
    remakeWindow()




pygame.quit()
